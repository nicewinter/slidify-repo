set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(adData)
dim(adData)
set.seed(62433)
modFit1<-train(diagnosis~.,method="rf",data=training)
modFit2<-train(diagnosis~.,method="gbm",data=training)
modFit3<-train(diagnosis~.,method="lda",data=training)
pred1<-predict(modFit1,testing)
pred2<-predict(modFit1,testing)
pred3<-predict(modFit1,testing)
confusionMatrix(pred1,testing$diagnosis)
confusionMatrix(pred2,testing$diagnosis)
confusionMatrix(pred3,testing$diagnosis)
#do model stacking using "rf"
#fit a model that combines predictors
predDF<-data.frame(pred1,pred2,pred3, diagnosis=testing$diagnosis)
combModFit<-train(diagnosis~.,method="rf",data=predDF)
combPred<-predict(combModFit,predDF)
confusionMatrix(combPred,testing$diagnosis)
pred1<-predict(modFit1,testing)
pred2<-predict(modFit2,testing)
pred3<-predict(modFit3,testing)
confusionMatrix(pred1,testing$diagnosis)
confusionMatrix(pred2,testing$diagnosis)
confusionMatrix(pred3,testing$diagnosis)
#do model stacking using "rf"
#fit a model that combines predictors
predDF<-data.frame(pred1,pred2,pred3, diagnosis=testing$diagnosis)
combModFit<-train(diagnosis~.,method="rf",data=predDF)
combPred<-predict(combModFit,predDF)
confusionMatrix(combPred,testing$diagnosis)
modFit<-train(CompressiveStrength~.,method="lasso",data=concrete)
set.seed(233)
modFit<-train(CompressiveStrength~.,method="lasso",data=training)
names(training)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modFit<-train(CompressiveStrength~.,method="lasso",data=training)
names(training)
set.seed(233)
#modFit<-train(CompressiveStrength~.,method="lasso",data=training)
modFit<- train(CompressiveStrength~., method = "lasso", trControl = rctrl1,
preProc = c("center", "scale"),data = training)
install.packages("elasticnet")
modFit<- train(CompressiveStrength~., method = "lasso", trControl = rctrl1,
preProc = c("center", "scale"),data = training)
?
adf
a
afj
?plot.enet
??plot.enet
plot.enet
library(pgmm);library(rpart);library(gbm);library(lubridate);library(forecast);library(e1071)
install.packages("lubridate")
plot.enet
library(forecast);library(e1071)
install.packages("forecast")
q()
?colMeans
?data.frame
seq
?seq
x<-c(rnorm(10), runif(10), rnorm(10,1))
class(x)
x
?sapply
x<-rnorm(10); f1<-gl(2,5); f2<-gl(5,2); interaction(f1,f2); str(split(x,list(f1,f2)))
q()
getwd()
getwd()
getwd()
q()
q()
getwd()
getwd()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='nicewinter', token='7DF387BD6A6026ED8490620EE95B62C1', secret='EpXwOZVxFj7vJ0yi+kZXDXwO1WgoUMlSC5wjVvgQ')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
getwd()
shinyapps::deployApp('ui.R')
shinyapps::deployApp('./')
shinyapps::deployApp('/')
deployApp()
getwd()
runApp()
library(shiny)
runApp()
x<-0
x
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x<-0
runApp()
runApp()
x
x<-0
x
runApp()
x
x
x<-0
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
q()
install.packages("manipulate")
library(manipulate); manipulate(plot(1:x), x=slider(1,100))
library(manipulate) manipulate(plot(1:x),
x=slider(1,100))
library(manipulate) manipulate(plot(1:x), x=slider(1,100))
library(manipulate)
manipulate(plot(1:x), x=slider(1,100))
library(manipulate)
manipulate(plot(1:x), x=slider(1,100))
library(manipulate); manipulate(plot(1:x), x=slider(1,100))
library(manipulate)
myHist<- function(mu) {
hist(iris$Sepal.Length,xlab="sepal length",col="blue",
breaks=100, main="Histogram")
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((iris$Sepal.Length-mu)^2)
text(63,150,paste("mu=",mu))
text(63,150,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu), mu=slider(4,8,step=0.5))
library(manipulate)
myHist<- function(mu) {
hist(iris$Sepal.Length,col="blue", breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((iris$Sepal.Length-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu), mu=slider(4,8,step=0.5))
install.packages("UsingR")
data(galton)
library(manipulate)
myHist<- function(mu) {
hist(iris$Sepal.Length,col="blue", breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((iris$Sepal.Length-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu), mu=slider(4,8,step=0.5))
library(manipulate)
myHist<- function(mu) {
hist(iris$Sepal.Length,col="blue", breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((iris$Sepal.Length-mu)^2)
text(4,8,paste("mu=",mu))
text(4,6,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu), mu=slider(4,8,step=0.5))
library(manipulate)
myHist<- function(mu) {
hist(iris$Sepal.Length,col="blue", breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((iris$Sepal.Length-mu)^2)
text(5,8,paste("mu=",mu))
text(5,6,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu), mu=slider(4,8,step=0.5))
install.packages("rCharts")
install.packages("slidify")
install.packages("Slidify")
require(rCharts)
haireye=as.data.frame(HairEyeColor)
n1<-nPlot(Freq ~ Hair, group='Eye', type='multiBarChart', data=subset
(haireye, Sex=='Male'))
n1$save('fig/n1.html',cdn=TRUE)
#embed rChart in the slidify below:
cat('<iframe src="fig/n1.html" width=100% height=600></iframe>')
require(rCharts)
haireye=as.data.frame(HairEyeColor)
n1<-nPlot(Freq ~ Hair, group='Eye', type='multiBarChart', data=subset
(haireye, Sex=='Male'))
n1$save('fig/n1.html',cdn=TRUE)
#embed rChart in the slidify below:
cat('<iframe src="fig/n1.html" width=100% height=600></iframe>')
n1
#note: rChart drawing has to be done in RStudio!
require(rCharts)
haireye=as.data.frame(HairEyeColor)
n1<-nPlot(Freq ~ Hair, group='Eye', type='multiBarChart', data=subset
(haireye, Sex=='Male'))
n1$save('fig/n1.html',cdn=TRUE)
#embed rChart in the slidify below:
cat('<iframe src="fig/n1.html" width=100% height=600></iframe>')
#typing n1 in RStudio console to show the plot:
n1
n1$container
n1$html_id
n1$html()
names(iris)<-gsub("\\.","",names(iris))
r1<-rPlot(SepalLength~SepalWidth | Species, data=iris,
color='Species', type='point')
r1$save('fig/r1.html',cdn=TRUE)
cat('<iframe src="fig/r1.html" width=100% height=600></iframe>')
r1
#do it in RStudio console!
hair_eye=as.data.frame(HairEyeColor)
r1<-rPlot(Freq~Hair | Eye, data=hair_eye, color='Eye', type='bar')
r2$save('fig/r2.html',cdn=TRUE)
cat('<iframe src="fig/r2.html" width=100% height=600></iframe>')
#typing r2 in RStudio console to show the plot:
r2
===
#do it in RStudio console!
hair_eye=as.data.frame(HairEyeColor)
r2<-rPlot(Freq~Hair | Eye, data=hair_eye, color='Eye', type='bar')
r2$save('fig/r2.html',cdn=TRUE)
cat('<iframe src="fig/r2.html" width=100% height=600></iframe>')
#typing r2 in RStudio console to show the plot:
r2
require(rCharts)
haireye=as.data.frame(HairEyeColor)
n1<-nPlot(Freq ~ Hair, group='Eye', type='multiBarChart', data=subset
(haireye, Sex=='Male'))
#save the plot object n1 as local file, for later use, e.g. slidify
n1$save('fig/n1.html',cdn=TRUE)
#embed rChart in the slidify below:
cat('<iframe src="fig/n1.html" width=100% height=600></iframe>')
#typing n1 in RStudio console to show the plot:
n1
r1<-rPlot(mpg~wt | am+vs, data=mtcars, type="point", color="gear")
r1$print("chart1") #print out the js
r1$save('fig/myPlot.html') #save as html file
r1$publish('myPlot',host='gist') # save to gist, rjson required
data(economics,package="ggplot2")
econ<-transform(economics, date=as.character(date))
m1<-mPlot(x="date",y=c("psavert","uempmed"),type="Line",data=econ)
m1$set(pointSize=0, lineWidth=1)
m1$save('fig/m1.html',cdn=TRUE)
cat('<iframe src="fig/m1.html" width=100% height=600></iframe>')
m1
names(economics)
head(economics,3)
class(economics$date)
require(reshape2)
uspexp<-melt(USPersonalExpenditure)
names(uspexp)
names(uspexp)[1:2] = c("category","year")
x1<-xPlot(value~year, group="category", data=uspexp, type="line-dotted")
x1$save('fig/x1.html',cdn=TRUE)
cat('<iframe src="fig/x1.html" width=100% height=600></iframe>')
x1
map3<-Leaflet$new()
map3$setView(c(51.505,-0.09),zoom=13)
map3$marker(c(51.5,-0.09),bindPopup="<p>Hi. I am a popup!</p>")
map3$marker(c(51.495,-0.083),bindPopup="<p>Hi. I am another popup!
</p>")
map3$save('fig/map3.html',cdn=TRUE)
cat('<iframe src="fig/map3.html" width=100% height=600></iframe>')
map3
map3<-Leaflet$new()
map3$setView(c(51.505,-0.09),zoom=13)
map3$marker(c(51.5,-0.09),bindPopup="<p>Hi. I am a popup</p>")
map3$marker(c(51.495,-0.083),bindPopup="<p>Hi. I am another
popup</p>")
map3$save('fig/map3.html',cdn=TRUE)
cat('<iframe src="fig/map3.html" width=100% height=600></iframe>')
mmap3
map3
map3
map3
usp=reshape::melt(USPersonalExpenditure)
#get the decades into a date Rickshaw likes
usp$Var2<-as.numeric(as.POSIXct(paste0(usp$Var2,"-01-01")))
p4<-Rickshaw$new()
p4$layer(value~Var2, group="Var1", data=usp, type="area", width=560)
#add a helpful slider this easily; other features TRUE as a default
p4$set(slider=TRUE)
p4$save('fig/p4.html',cdn=TRUE)
cat('<iframe src="fig/map3.html" width=100% height=600></iframe>')
p4
usp=reshape::melt(USPersonalExpenditure)
#get the decades into a date Rickshaw likes
usp$Var2<-as.numeric(as.POSIXct(paste0(usp$Var2,"-01-01")))
p4<-Rickshaw$new()
p4$layer(value~Var2, group="Var1", data=usp, type="area", width=560)
#add a helpful slider this easily; other features TRUE as a default
p4$set(slider=TRUE)
p4$save('fig/p4.html',cdn=TRUE)
cat('<iframe src="fig/map3.html" width=100% height=600></iframe>')
p4
require(reshape2)
uspexp<-melt(USPersonalExpenditure)
names(uspexp)[1:2] = c("category","year")
x1<-xPlot(value~year, group="category", data=uspexp, type="line-
dotted")
x1$save('fig/x1.html',cdn=TRUE)
cat('<iframe src="fig/x1.html" width=100% height=600></iframe>')
x1
x1
getwd()
require(reshape2)
uspexp<-melt(USPersonalExpenditure)
names(uspexp)[1:2] = c("category","year")
x1<-xPlot(value~year, group="category", data=uspexp, type="line-
dotted")
x1$save('fig/x1.html',cdn=TRUE)
cat('<iframe src="fig/x1.html" width=100% height=600></iframe>')
x1
data(economics,package="ggplot2")
econ<-transform(economics, date=as.character(date))
m1<-mPlot(x="date",y=c("psavert","uempmed"),type="Line",data=econ)
m1$set(pointSize=0, lineWidth=1)
m1$save('fig/m1.html',cdn=TRUE)
cat('<iframe src="fig/m1.html" width=100% height=600></iframe>')
m1
require(reshape2)
uspexp<-melt(USPersonalExpenditure)
names(uspexp)[1:2] = c("category","year")
x1<-xPlot(value~year, group="category", data=uspexp, type="line-
dotted")
x1$save('fig/x1.html',cdn=TRUE)
cat('<iframe src="fig/x1.html" width=100% height=600></iframe>')
x1
require(devtools)
install_github('ramnathv/rCharts')
h1<-hPlot(x="Wr.Hnd",y="NW.Hnd",data=MASS::survey,type=c
("line","bubble","scatter"),group="Clap",size="Age)
h1$save('fig/h1.html',cdn=TRUE)
cat('<iframe src="fig/h1.html" width=100% height=600></iframe>')
h1
h1<-hPlot(x="Wr.Hnd",y="NW.Hnd",data=MASS::survey,type=c
("line","bubble","scatter"),group="Clap",size="Age)
h1$save('fig/h1.html',cdn=TRUE)
cat('<iframe src="fig/h1.html" width=100% height=600></iframe>')
h1
h1<-hPlot(x="Wr.Hnd",y="NW.Hnd",data=MASS::survey,type=c("line","bubble","scatter"),group="Clap",size="Age)
h1$save('fig/h1.html',cdn=TRUE)
cat('<iframe src="fig/h1.html" width=100% height=600></iframe>')
h1
h1<-hPlot(x="Wr.Hnd",y="NW.Hnd",data=MASS::survey,type=c("line","bubble","scatter"),group="Clap",size="Age)
h1
h1<-hPlot(x="Wr.Hnd",y="NW.Hnd",data=MASS::survey,type=c("line","bubble","scatter"),group="Clap",size="Age)
h1<-hPlot(x="Wr.Hnd",y="NW.Hnd",data=MASS::survey,type=c
("line","bubble","scatter"),group="Clap",size="Age)
h1$save('fig/h1.html',cdn=TRUE)
cat('<iframe src="fig/h1.html" width=100% height=600></iframe>')
h1
h1<-hPlot(x="Wr.Hnd",y="NW.Hnd",data=MASS::survey,type=c
("line","bubble","scatter"),group="Clap",size="Age)
h1$save('fig/h1.html',cdn=TRUE)
cat('<iframe src="fig/h1.html" width=100% height=600></iframe>')
h1
h1<-hPlot(x="Wr.Hnd",y="NW.Hnd",data=MASS::survey,type=c("line","bubble","scatter"),group="Clap",size="Age)
data(economics,package="ggplot2")
econ<-transform(economics, date=as.character(date))
m1<-mPlot(x="date",y=c("psavert","uempmed"),type="Line",data=econ)
m1$set(pointSize=0, lineWidth=1)
m1$save('fig/m1.html',cdn=TRUE)
cat('<iframe src="fig/m1.html" width=100% height=600></iframe>')
m1
data(economics,package="ggplot2")
econ<-transform(economics, date=as.character(date))
m1<-mPlot(x="date",y=c("psavert","uempmed"),type="Line",data=econ)
m1$set(pointSize=0, lineWidth=1)
m1$save('fig/m1.html',cdn=TRUE)
cat('<iframe src="fig/m1.html" width=100% height=600></iframe>')
m1
h1<-hPlot(x="Wr.Hnd",y="NW.Hnd",data=MASS::survey,type=c("line","bubble","scatter"),group="Clap",size="Age)
h1$save('fig/h1.html',cdn=TRUE)
cat('<iframe src="fig/h1.html" width=100% height=600></iframe>')
h1
h1<-hPlot(x="Wr.Hnd",y="NW.Hnd",data=MASS::survey,type=c("line","bubble","scatter"),group="Clap",size="Age)
h1$save('fig/h1.html',cdn=TRUE)
cat('<iframe src="fig/h1.html" width=100% height=600></iframe>')
h1
hPlot(x="Wr.Hnd",y="NW.Hnd",data=MASS::survey,type=c("line","bubble","scatter"),group="Clap",size="Age)
hPlot(x="Wr.Hnd",y="NW.Hnd",data=MASS::survey,type=c("line","bubble","scatter"),group="Clap",size="Age)
hPlot(x="Wr.Hnd",y="NW.Hnd",data=MASS::survey,type=c("line","bubble","scatter"),group="Clap",size="Age)
m1<-mPlot(x="date",y=c("psavert","uempmed"),type="Line",data=econ)
m1<-mPlot(x="date",y=c("psavert","uempmed"),type="Line",data=econ)
m1
h1<-hPlot(x="Wr.Hnd",y="NW.Hnd",data=MASS::survey,type=c("line","bubble","scatter"),group="Clap",size="Age)
Data Products (Shiny, Manipulate, rCharts, etc.)
fd
areeg
rg
aeremngi;j
}
}
```{r setoptions, echo=FALSE, message=FALSE}
library("knitr")
#.libPaths()
suppressPackageStartupMessages(library(googleVis))
M<-gvisMotionChart(Fruits,"Fruit","Year",options=list
(width=600,height=400))
print(M,"chart")
install.packages("googlevis")
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M<-gvisMotionChart(Fruits,"Fruit","Year",options=list
(width=600,height=400))
print(M,"chart")
M
gvisMotionChart(Fruits,"Fruit","Year",options=list
(width=600,height=400))
suppressPackageStartupMessages(library(googleVis))
M<-gvisMotionChart(Fruits,"Fruit","Year",options=list(width=600,height=400))
print(M,"chart")
print(M,"chart")
M
print(M)
data(economics,package="ggplot2")
econ<-transform(economics, date=as.character(date))
m1<-mPlot(x="date",y=c("psavert","uempmed"),type="Line",data=econ)
m1$set(pointSize=0, lineWidth=1)
m1$save('fig/m1.html',cdn=TRUE)
cat('<iframe src="fig/m1.html" width=100% height=600></iframe>')
m1
getwd()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
myHist<- function(mu) {
hist(iris$Sepal.Length,col="blue", breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((iris$Sepal.Length-mu)^2)
text(5,8,paste("mu=",mu))
text(5,6,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu), mu=slider(4,8,step=0.5))
class(iris$SepalLength)
library(manipulate)
myHist<- function(mu) {
hist(iris$Sepal.Length,col="blue", breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((iris$Sepal.Length-mu)^2)
text(5,8,paste("mu=",mu))
text(5,6,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu), mu=slider(4,8,step=0.5))
library(manipulate)
myHist<- function(mu) {
hist(iris$Sepal.Length,col="blue", breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((iris$Sepal.Length-mu)^2)
text(5,8,paste("mu=",mu))
text(5,6,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu), mu=slider(4,8,step=0.5))
names(iris)
class(iris)
class(iris$SepalLength)
library(manipulate)
myHist<- function(mu) {
hist(iris$Sepal.Length,col="blue", breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((iris$Sepal.Length-mu)^2)
text(5,8,paste("mu=",mu))
text(5,6,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu), mu=slider(4,8,step=0.5))
library(manipulate)
myHist<- function(mu) {
hist(as.numeric(iris$Sepal.Length),col="blue", breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((iris$Sepal.Length-mu)^2)
text(5,8,paste("mu=",mu))
text(5,6,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu), mu=slider(4,8,step=0.5))
View(myHist)
View(myPlot)
View(rule2)
View(myPlot)
View(myHist)
?order
?order()
fp
f
p
========================================================
========================================================
publish(title = 'DataProductPresentation', 'index.html', host = 'rpubs')
library(slidify)
publish(title = 'DataProductPresentation', 'index.html', host = 'rpubs')
getwd()
setwd("C:/Personal/KnowledgeBase/DataProductProject")
getwd()
publish(title = 'DataProductPresentation', 'index.html', host = 'rpubs')
